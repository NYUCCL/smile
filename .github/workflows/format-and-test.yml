name: Format and Test

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  format-and-test:
    runs-on: ubuntu-latest

    env:
      GITHUB_COMMIT_MESSAGE: '${{ github.event.head_commit.message }}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      # setup node.js
      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.11.1 # this is what i'm using locally

      # install node packages
      - name: Install node dependencies
        run: npm install

      # accesses some git variables and processes them to be lower case/short/escaped
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      # Configure git-specific .env file
      - name: Expose git-specific information to the Vite environment
        env:
          ENV_FILE: 'env/.env.git.local'
        run: |
          escape_quotes() {
            # Get the input string
            input="$1"
            # Escape single quotes
            input="${input//\'/\'}"
            # Escape double quotes
            input="${input//\"/\\\"}"
            # Return the escaped string
            echo "$input"
          }
          echo "------"
          echo "# DO NOT EDIT THIS FILE IT IS AUTOMATICALLY GENERATED" > $ENV_FILE
          if test -z "${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          then
            echo "VITE_PROJECT_NAME  =   unknown" >> $ENV_FILE
            VITE_PROJECT_NAME='unknown'
          else
            echo "VITE_PROJECT_NAME  =   ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}" >> $ENV_FILE
            VITE_PROJECT_NAME='${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}'
          fi
          if test -z "${{ env.GITHUB_SHA_SHORT }}"
          then
            echo "VITE_GIT_HASH      =   x0x0x0x0" >> $ENV_FILE
            VITE_GIT_HASH='x0x0x0x0'
          else
            echo "VITE_GIT_HASH      =   ${{ env.GITHUB_SHA_SHORT }}" >> $ENV_FILE
            VITE_GIT_HASH='${{ env.GITHUB_SHA_SHORT }}'
          fi
          if test -z "${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          then
            echo "VITE_GIT_OWNER     =   unknown_owner" >> $ENV_FILE
            VITE_GIT_OWNER='unknown_owner'
          else
            echo "VITE_GIT_OWNER     =   ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}" >> $ENV_FILE
            VITE_GIT_OWNER='${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}'
          fi
          if test -z "${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          then
            echo "VITE_GIT_REPO_NAME  =   unknown_repo" >> $ENV_FILE
            VITE_GIT_REPO_NAME='unknown_repo'
          else
            echo "VITE_GIT_REPO_NAME  =   ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}" >> $ENV_FILE
            VITE_GIT_REPO_NAME='${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}'
          fi
          if test -z "${{ env.GITHUB_REF_SLUG }}"
          then
            echo "VITE_GIT_BRANCH_NAME  =   unknown_branch" >> $ENV_FILE
            VITE_GIT_BRANCH_NAME='unknown_branch'
          else
            echo "VITE_GIT_BRANCH_NAME  =   ${{ env.GITHUB_REF_SLUG }}" >> $ENV_FILE
            VITE_GIT_BRANCH_NAME='${{ env.GITHUB_REF_SLUG }}'
          fi
          if test -z "${{ github.event.head_commit.message }}"
          then
            echo "VITE_GIT_LAST_MSG   =   (no commit message)" >> $ENV_FILE
            VITE_GIT_LAST_MSG='(no commit message)'
          else
            echo "VITE_GIT_LAST_MSG   =   $GITHUB_COMMIT_MESSAGE" >> $ENV_FILE
            VITE_GIT_LAST_MSG="$GITHUB_COMMIT_MESSAGE"
          fi
          echo "VITE_DEPLOY_BASE_PATH   =  '/${VITE_GIT_OWNER}/${VITE_GIT_REPO_NAME}/${VITE_GIT_BRANCH_NAME}/'" >> $ENV_FILE
          CODENAME=$(node scripts/codenamize.cjs "/${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}/${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}/${{ env.GITHUB_REF_SLUG }}")
          echo "VITE_CODE_NAME          = ${CODENAME}" >> $ENV_FILE
          cat $ENV_FILE

      # put the full path name in VITE_DEPLOY_BASE_PATH

      # Configure secure information configuration
      - name: Expose secret information to the Vite environment
        env:
          SECRET_APP_CONFIG: ${{ secrets.SECRET_APP_CONFIG }}
          SECRET_ENV_FILE: 'env/.env.local'
        run: |
          echo "------"
          echo $SECRET_APP_CONFIG | base64 --decode > $SECRET_ENV_FILE

      # load the environment
      - name: Load the github dotenv file
        id: dotenv_github
        uses: falti/dotenv-action@v1.1
        with:
          path: 'env/.env.git.local'

      - name: Load the general config dotenv file
        id: dotenv_config
        uses: falti/dotenv-action@v1.1
        with:
          path: './env/.env.local'

      # echo all the environment variables
      - name: echo the environment variables
        run: |
          echo "deploy url: ${{ secrets.EXP_DEPLOY_PATH }}${{ steps.dotenv_github.outputs.VITE_DEPLOY_BASE_PATH }}"

      # place the deploy settings into the environment files
      # this one needs to be made available to vite.config.js
      - name: create deploy file
        env:
          DEPLOY_ENV_FILE: 'env/.env.deploy.local'
        run: |
          echo "VITE_DEPLOY_URL = 'https://${{ secrets.EXP_DEPLOY_HOST }}${{ steps.dotenv_github.outputs.VITE_DEPLOY_BASE_PATH }}'" > $DEPLOY_ENV_FILE
          echo 'VITE_CODE_NAME_DEPLOY_URL         =  "https://${{ secrets.EXP_DEPLOY_HOST }}/e/${{ steps.dotenv_github.outputs.VITE_CODE_NAME }}"' >> $DEPLOY_ENV_FILE
          cat $DEPLOY_ENV_FILE

      # check code formatting
      - name: Check code formatting
        id: prettier-check
        run: npx prettier --check . || echo "PRETTIER_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Format code with Prettier
        if: env.PRETTIER_FAILED == 'true'
        run: npx prettier --write .

      - name: Commit formatting changes
        if: env.PRETTIER_FAILED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'style: apply prettier formatting'
          branch: ${{ github.head_ref }}

      # run tests
      - name: Run tests
        id: run-tests
        run: npm run test
        continue-on-error: true

      - name: Report test status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const prettier_failed = process.env.PRETTIER_FAILED === 'true';
            const tests_failed = "${{ steps.run-tests.outcome }}" === "failure";

            let summary = "## Format and Test Results\n\n";

            if (prettier_failed) {
              summary += "‚ö†Ô∏è **Code formatting issues detected and fixed**\n\n";
              summary += "Prettier has automatically formatted your code according to the project's style guidelines. The changes have been committed to your branch.\n\n";
            } else {
              summary += "‚úÖ **Code formatting looks good!**\n\n";
            }

            if (tests_failed) {
              summary += "‚ùå **Tests failed**\n\n";
              summary += "Please check the workflow logs for details on the failing tests.\n\n";
              // Add direct link to the workflow run
              const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
              summary += `üîç [View detailed test results](${runUrl})\n\n`;
            } else {
              summary += "‚úÖ **All tests passed!**\n\n";
            }

            // Only try to create a comment if we're in a pull request context
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              console.log("Not in a pull request context, skipping comment creation");
              console.log(summary);
            }

            if (tests_failed) {
              core.setFailed("Tests failed. Please fix the failing tests before merging.");
            }
