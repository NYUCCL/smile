# This is a basic workflow to help you get started with Actions

name: DEPLOY2

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches-ignore:
      - main # want this to be all branches eventually
    paths-ignore:  # ignore any changes to the docs for this workflow
      - 'docs/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      ## TODO CHANGE THIS TO CHECK OUT THE BRANCH THAT WAS COMMITTED TO
      - name: Checkout committed to branch
        uses: actions/checkout@v3

      # accesses some git variables and processes them to be lower case/short/escaped
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x

      # Configure git-specific .env file
      - name: Expose git-specific information to the Vite environment
        env:
          ENV_FILE: "env/.env"
        run: |
          echo "------"
          if test -z "${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          then
            echo "VITE_PROJECT_NAME  =   unknown" > $ENV_FILE
          else
            echo "VITE_PROJECT_NAME  =   ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}" > $ENV_FILE
          fi
          if test -z "${{ env.GITHUB_SHA_SHORT }}"
          then
            echo "VITE_GIT_HASH      =   x0x0x0x0" >> $ENV_FILE
          else
            echo "VITE_GIT_HASH      =   ${{ env.GITHUB_SHA_SHORT }}" >> $ENV_FILE
          fi
          if test -z "${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          then
            echo "VITE_GIT_OWNER     =   unknown_owner" >> $ENV_FILE
          else
            echo "VITE_GIT_OWNER     =   ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}" >> $ENV_FILE
          fi
          if test -z "${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          then
            echo "VITE_GIT_REPO_NAME  =   unknown_repo" >> $ENV_FILE
          else
            echo "VITE_GIT_REPO_NAME  =   ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}" >> $ENV_FILE
          fi
          if test -z "${{ github.event.head_commit.message }}"
          then
            echo "VITE_GIT_LAST_MSG   =   (no commit message)" >> $ENV_FILE
          else
            echo "VITE_GIT_LAST_MSG   =   ${{ github.event.head_commit.message }}" >> $ENV_FILE
          fi
          cat $ENV_FILE
      
      # Configure secure information configuration
      - name: Expose secret information to the Vite environment
        env:
          SECRET_APP_CONFIG: ${{ secrets.SECRET_APP_CONFIG }}
          SECRET_ENV_FILE: "env/.env.local"
        run: |
          echo "------"
          echo $SECRET_APP_CONFIG | base64 --decode > $SECRET_ENV_FILE
          cat $SECRET_ENV_FILE

      # setup node.js
      # - name: Setup node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16.15.1 # this is what i'm using locally
        
      # install node packages
      # - name: Install node dependencies
      #   run: npm install

      # run script to generation the .env files here
      # - name: Configuring environment files
      #   run: something

      # - name: Build web app
      #   run: npm run build

      # Runs a single command using the runners shell
      # - name: List the files
      #   run: ls -la
        
      # Deploy files to web server
      # - name: rsync to server
      #   uses: burnett01/rsync-deployments@5.2
      #   with:
      #     switches: -avrz --delete
      #     path: dist/
      #     remote_path: ${{ secrets.DEPLOY_PATH }}  # this should be configured with branch name and versioning
      #     remote_host: ${{ secrets.DEPLOY_HOST }}
      #     remote_port: ${{ secrets.DEPLOY_PORT }}
      #     remote_user: ${{ secrets.DEPLOY_USER }}
      #     remote_key:  ${{ secrets.DEPLOY_KEY  }}
